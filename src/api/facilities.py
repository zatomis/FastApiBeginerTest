from fastapi_cache.decorator import cache
from fastapi import APIRouter, Body, Query
from src.api.dependencies import DBDep
from src.schemas.facilities import FaclitiesAdd
from src.tasks.task import test_task

router = APIRouter(prefix='/facilities', tags=["–£–¥–æ–±—Å—Ç–≤–∞ üöΩ"])


@router.get("/",
            summary="–£–¥–æ–±—Å—Ç–≤–∞",
            description="<H1>–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± —É–¥–æ–±—Å—Ç–≤–∞—Ö</H1>")
@cache(expire=10)
async def get_facilities(db: DBDep):
    # #–ø—Ä–∏–º–µ—Ä –Ω–∞ –æ–±—ã—á–Ω–æ–º Redis –±–µ–∑ –ø–ª–∞–≥–∏–Ω–æ–≤
    # faclities_from_cashe = await redis_manager.get("facilities")
    # if not faclities_from_cashe:
    #     faclities = await db.facilities.get_all()
    #     #—Ç.–∫ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å—Ç—Ä–æ–∫–∞–º–∏ - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
    #     #faclities-—Å–ø–∏—Å–æ–∫ PyDantic —Å—Ö–µ–º, —Ç–æ –∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–∞—Ä–µ–π,
    #     #–∞ –ø–æ—Ç–æ–º –≤ json
    #     faclities_schemas: list[dict] = [f.model_dump() for f in faclities]
    #     faclities_json = json.dumps(faclities_schemas)
    #     await redis_manager.set("facilities", faclities_json, 10)
    #     return faclities
    # else:
    #     faclities_dicts = json.loads(faclities_from_cashe)
    #     return faclities_dicts
    return await db.facilities.get_all()


@router.post("/",
           summary="–î–æ–±–∞–≤–∏—Ç—å —É–¥–æ–±—Å—Ç–≤–∞ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤",
           description="<H1>–î–æ–±–∞–≤–∏—Ç—å —É–¥–æ–±—Å—Ç–≤–∞ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤</H1>")
async def create_facility(db: DBDep,
                      faclities_data: FaclitiesAdd = Body()):
    faclities = await db.facilities.add(faclities_data)
    await db.commit()
    test_task.delay()
    return {"status": "OK", "data": faclities}
